name: CD MQTT y Main API

on:
  push:
    branches:
      - "main"
      - "feat/cd_build_locally"
  workflow_dispatch:

jobs:
  build-and-push-api-workers:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3

      - name: Setup environment variables
        run: |
          run: |
          echo "TIMESTAMP=$(date +"%Y-%d-%m_%H-%M-%S")" >> $GITHUB_ENV

          #cp ./template.env ./workers/.env
          cd workers
          
          ## FIXME: Usar variables de entorno
          echo -e "GROUP_NUMBER=19\nNODE_ENVIRONMENT=development\nAPI_HOST=api\nAPI_NODE_VERSION=16.13.1\nAPI_PROTOCOL=http\nMQTT_PROTOCOL=http\nAPI_PORT=64563\nIP_INFO_TOKEN=9e61f5fef010b5\nWEBPAY_REDIRECT_URL='https://grupo19-front.fjcf2001.me/purchaseCompleted'\n#WEBPAY_REDIRECT_URL='http://localhost:5173/purchaseCompleted'\nWEBPAY_SESSION_NAME='grupo19-stocks'\nWORKERS_API_JOB_URL='https://api.arqui-workers.ljg.cl/job'\nPDF_LAMBDA_FUNCTION='Creador-de-boletas'\nBUCKET_REGION='us-east-2'\nCURRENCY_CONVERSION_KEY=68e1e4c21564c5ca34feb813\nAWS_ACCESS_KEY_S3=AKIAT7NQUZTXZMF2SUEG\nAWS_SECRET_ACCESS_KEY_S3=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\nDB_HOST=db\nDB_DIALECT=postgres\nDB_NAME=backend\nDB_PORT=15432\nDB_USERNAME=mi_base\nDB_PASSWORD=de_datos\nMQTT_API_HOST=mqtt\nMQTT_API_INFO_CHANNEL=stocks/info\nMQTT_API_VALIDATION_CHANNEL=stocks/validation\nMQTT_API_VALIDATIONS_PATH=validations\nMQTT_API_REQUEST_CHANNEL=stocks/requests\nMQTT_API_REQUESTS_PATH=requests\nMQTT_API_AUCTIONS_CHANNEL=auctions\nMQTT_API_NODE_VERSION=16.13.1\nMQTT_API_PORT=64564\nMQTT_CONNECTION_TIMEOUT=5000\nMQTT_BROKER_PORT=9000\nMQTT_BROKER_HOST=broker.legit.capital\nMQTT_BROKER_USERNAME=students\nMQTT_BROKER_PASSWORD=iic2173-2023-2-students\nLOG_LEVEL=DEBUG\nWORKER_API_HOST=worker_api\nWORKER_API_PORT=65534\nREDIS_PROTOCOL=redis\nREDIS_HOST=redis_workers\nREDIS_PORT=6379\nREDIS_DATABASE=0\nN_WORKERS=5\nQUERY_FETCH_SIZE=1000\nMAIN_API_URI=https://api.arqui.ljg.cl/\nDDNS_DOMAINS=arqui-workers.ljg.cl\nCLOUDFLARE_API_KEY=tVrhhLqaE_u-2vFrbo0r7dObTdcdllqOvWn6hwts\n" > .env

          #echo "IP_INFO_TOKEN=${{ secrets.IP_INFO_TOKEN }}" >> .env
          #echo "CURRENCY_CONVERSION_KEY=${{ secrets.CURRENCY_CONVERSION_KEY }}" >> .env
          #echo "AWS_ACCESS_KEY_S3=${{ secrets.AWS_ACCESS_KEY_S3 }}" >> .env
          #echo "AWS_SECRET_ACCESS_KEY_S3=${{ secrets.AWS_SECRET_ACCESS_KEY_S3 }}" >> .env
          #echo "DB_USERNAME=${{ secrets.DB_USERNAME }}" >> .env
          #echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
          #echo "MQTT_BROKER_USERNAME=${{ secrets.MQTT_BROKER_USERNAME }}" >> .env
          #echo "MQTT_BROKER_PASSWORD=${{ secrets.MQTT_BROKER_PASSWORD }}" >> .env
          #echo "CLOUDFLARE_API_KEY=${{ secrets.CLOUDFLARE_API_KEY }}" >> .env

      - name: Install docker
        run: |
          echo "deb [arch=$(dpkg --print-architecture) trusted=true] https://download.docker.com/linux/ubuntu $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
          sudo apt-get update
          sudo apt-get install -y ca-certificates curl gnupg docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin

      - name: Build API Workers Image
        run: |
          sudo chmod -R a+x ./
          cd workers
          sudo docker compose -f ./docker-compose.yaml build api_workers

      - name: Tag image
        run: |
          sudo docker tag registry.docker.ljgonzalez.cl/arqui-sis/async-tech/backend/api-worker:latest registry.docker.ljgonzalez.cl/arqui-sis/async-tech/backend/api-worker:github-${TIMESTAMP} ;
          sudo docker tag registry.docker.ljgonzalez.cl/arqui-sis/async-tech/backend/api-worker:latest registry.docker.ljgonzalez.cl/arqui-sis/async-tech/backend/api-worker:github-latest ;
          #sudo docker tag registry.docker.ljgonzalez.cl/arqui-sis/async-tech/backend/api-worker:latest registry.docker.ljgonzalez.cl/arqui-sis/async-tech/backend/api-worker:latest

      - name: Push image
        run: |
          sudo docker push registry.docker.ljgonzalez.cl/arqui-sis/async-tech/backend/api-worker:latest
          sudo docker push registry.docker.ljgonzalez.cl/arqui-sis/async-tech/backend/api-worker:github-latest
          sudo docker push registry.docker.ljgonzalez.cl/arqui-sis/async-tech/backend/api-worker:github-${TIMESTAMP}

  build-and-push-celery-workers:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3

      - name: Setup environment variables
        run: |
          echo "TIMESTAMP=$(date +"%Y-%d-%m_%H-%M-%S")" >> $GITHUB_ENV

          #cp ./template.env ./workers/.env
          cd workers
          
          ## FIXME: Usar variables de entorno
          echo -e "GROUP_NUMBER=19\nNODE_ENVIRONMENT=development\nAPI_HOST=api\nAPI_NODE_VERSION=16.13.1\nAPI_PROTOCOL=http\nMQTT_PROTOCOL=http\nAPI_PORT=64563\nIP_INFO_TOKEN=9e61f5fef010b5\nWEBPAY_REDIRECT_URL='https://grupo19-front.fjcf2001.me/purchaseCompleted'\n#WEBPAY_REDIRECT_URL='http://localhost:5173/purchaseCompleted'\nWEBPAY_SESSION_NAME='grupo19-stocks'\nWORKERS_API_JOB_URL='https://api.arqui-workers.ljg.cl/job'\nPDF_LAMBDA_FUNCTION='Creador-de-boletas'\nBUCKET_REGION='us-east-2'\nCURRENCY_CONVERSION_KEY=68e1e4c21564c5ca34feb813\nAWS_ACCESS_KEY_S3=AKIAT7NQUZTXZMF2SUEG\nAWS_SECRET_ACCESS_KEY_S3=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\nDB_HOST=db\nDB_DIALECT=postgres\nDB_NAME=backend\nDB_PORT=15432\nDB_USERNAME=mi_base\nDB_PASSWORD=de_datos\nMQTT_API_HOST=mqtt\nMQTT_API_INFO_CHANNEL=stocks/info\nMQTT_API_VALIDATION_CHANNEL=stocks/validation\nMQTT_API_VALIDATIONS_PATH=validations\nMQTT_API_REQUEST_CHANNEL=stocks/requests\nMQTT_API_REQUESTS_PATH=requests\nMQTT_API_AUCTIONS_CHANNEL=auctions\nMQTT_API_NODE_VERSION=16.13.1\nMQTT_API_PORT=64564\nMQTT_CONNECTION_TIMEOUT=5000\nMQTT_BROKER_PORT=9000\nMQTT_BROKER_HOST=broker.legit.capital\nMQTT_BROKER_USERNAME=students\nMQTT_BROKER_PASSWORD=iic2173-2023-2-students\nLOG_LEVEL=DEBUG\nWORKER_API_HOST=worker_api\nWORKER_API_PORT=65534\nREDIS_PROTOCOL=redis\nREDIS_HOST=redis_workers\nREDIS_PORT=6379\nREDIS_DATABASE=0\nN_WORKERS=5\nQUERY_FETCH_SIZE=1000\nMAIN_API_URI=https://api.arqui.ljg.cl/\nDDNS_DOMAINS=arqui-workers.ljg.cl\nCLOUDFLARE_API_KEY=tVrhhLqaE_u-2vFrbo0r7dObTdcdllqOvWn6hwts\n" > .env

          #echo "IP_INFO_TOKEN=${{ secrets.IP_INFO_TOKEN }}" >> .env
          #echo "CURRENCY_CONVERSION_KEY=${{ secrets.CURRENCY_CONVERSION_KEY }}" >> .env
          #echo "AWS_ACCESS_KEY_S3=${{ secrets.AWS_ACCESS_KEY_S3 }}" >> .env
          #echo "AWS_SECRET_ACCESS_KEY_S3=${{ secrets.AWS_SECRET_ACCESS_KEY_S3 }}" >> .env
          #echo "DB_USERNAME=${{ secrets.DB_USERNAME }}" >> .env
          #echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
          #echo "MQTT_BROKER_USERNAME=${{ secrets.MQTT_BROKER_USERNAME }}" >> .env
          #echo "MQTT_BROKER_PASSWORD=${{ secrets.MQTT_BROKER_PASSWORD }}" >> .env
          #echo "CLOUDFLARE_API_KEY=${{ secrets.CLOUDFLARE_API_KEY }}" >> .env

      - name: Install docker
        run: |
          echo "deb [arch=$(dpkg --print-architecture) trusted=true] https://download.docker.com/linux/ubuntu $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
          sudo apt-get update
          sudo apt-get install -y ca-certificates curl gnupg docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin

      - name: Build Main Celery Workers Image
        run: |
          sudo chmod -R a+x ./
          cd workers
          sudo docker compose -f ./docker-compose.yaml build celery_workers_2

      - name: Tag image
        run: |
          sudo docker tag registry.docker.ljgonzalez.cl/arqui-sis/async-tech/backend/celery-worker:latest registry.docker.ljgonzalez.cl/arqui-sis/async-tech/backend/celery-worker:github-${TIMESTAMP} ;
          sudo docker tag registry.docker.ljgonzalez.cl/arqui-sis/async-tech/backend/celery-worker:latest registry.docker.ljgonzalez.cl/arqui-sis/async-tech/backend/celery-worker:github-latest ;
          # sudo docker tag registry.docker.ljgonzalez.cl/arqui-sis/async-tech/backend/celery-worker:latest registry.docker.ljgonzalez.cl/arqui-sis/async-tech/backend/celery-worker:latest

      - name: Push image
        run: |
          sudo docker push registry.docker.ljgonzalez.cl/arqui-sis/async-tech/backend/celery-worker:latest
          sudo docker push registry.docker.ljgonzalez.cl/arqui-sis/async-tech/backend/celery-worker:github-latest
          sudo docker push registry.docker.ljgonzalez.cl/arqui-sis/async-tech/backend/celery-worker:github-${TIMESTAMP}

  update-repo:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3

      - name: Install ssh
        run: sudo apt-get install openssh-client sshpass -y

      - name: Setup environment variables
        run: |
          echo "EC2HOST=arqui-workers.ljg.cl" >> $GITHUB_ENV
          echo "EC2PORT=22" >> $GITHUB_ENV
          echo "EC2USER=ubuntu" >> $GITHUB_ENV
          echo "EC2PASSWD=${{ secrets.EC2PASSWD }}" >> $GITHUB_ENV

      - name: Take containers down
        id: take-stack-down
        run: |
          connect_ssh() { sshpass -p "${EC2PASSWD}" ssh -o StrictHostKeyChecking=no -p ${EC2PORT} ${EC2USER}@${EC2HOST} -Ct " cd /home/ubuntu/grupo19-backend/workers && $@" ; }
          connect_ssh "sudo docker compose -f ./docker-compose.yaml down"

      - name: FAILURE - Raise containers back up
        if: failure() && steps.take-stack-down.outcome == 'failure'
        run: |
          connect_ssh() { sshpass -p "${EC2PASSWD}" ssh -o StrictHostKeyChecking=no -p ${EC2PORT} ${EC2USER}@${EC2HOST} -Ct " cd /home/ubuntu/grupo19-backend/workers && $@" ; }
          connect_ssh "sudo docker compose -f ./docker-compose.yaml down -d"
          exit 1

      - name: Update repo
        run: |
          connect_ssh() { sshpass -p "${EC2PASSWD}" ssh -o StrictHostKeyChecking=no -p ${EC2PORT} ${EC2USER}@${EC2HOST} -Ct " cd /home/ubuntu/grupo19-backend && $@" ; }
          connect_ssh "git fetch"
          #connect_ssh "git reset --hard && git checkout main && git pull "
          connect_ssh "git reset --hard && git checkout feat/cd_build_locally && git pull "

  update_ssl-certificates:
    needs:
      - update-repo

    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3

      - name: Setup environment variables
        run: |
          echo "EC2HOST=arqui-workers.ljg.cl" >> $GITHUB_ENV
          echo "EC2PORT=22" >> $GITHUB_ENV
          echo "EC2USER=ubuntu" >> $GITHUB_ENV
          echo "EC2PASSWD=${{ secrets.EC2PASSWD }}" >> $GITHUB_ENV
          
          #cp ./template.env .env
          #echo "IP_INFO_TOKEN=${{ secrets.IP_INFO_TOKEN }}" >> .env
          #echo "CURRENCY_CONVERSION_KEY=${{ secrets.CURRENCY_CONVERSION_KEY }}" >> .env
          #echo "AWS_ACCESS_KEY_S3=${{ secrets.AWS_ACCESS_KEY_S3 }}" >> .env
          #echo "AWS_SECRET_ACCESS_KEY_S3=${{ secrets.AWS_SECRET_ACCESS_KEY_S3 }}" >> .env
          #echo "DB_USERNAME=${{ secrets.DB_USERNAME }}" >> .env
          #echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
          #echo "MQTT_BROKER_USERNAME=${{ secrets.MQTT_BROKER_USERNAME }}" >> .env
          #echo "MQTT_BROKER_PASSWORD=${{ secrets.MQTT_BROKER_PASSWORD }}" >> .env
          #echo "CLOUDFLARE_API_KEY=${{ secrets.CLOUDFLARE_API_KEY }}" >> .env
          
          ## FIXME: Usar variables de entorno
          echo -e "GROUP_NUMBER=19\nNODE_ENVIRONMENT=development\nAPI_HOST=api\nAPI_NODE_VERSION=16.13.1\nAPI_PROTOCOL=http\nMQTT_PROTOCOL=http\nAPI_PORT=64563\nIP_INFO_TOKEN=9e61f5fef010b5\nWEBPAY_REDIRECT_URL='https://grupo19-front.fjcf2001.me/purchaseCompleted'\n#WEBPAY_REDIRECT_URL='http://localhost:5173/purchaseCompleted'\nWEBPAY_SESSION_NAME='grupo19-stocks'\nWORKERS_API_JOB_URL='https://api.arqui-workers.ljg.cl/job'\nPDF_LAMBDA_FUNCTION='Creador-de-boletas'\nBUCKET_REGION='us-east-2'\nCURRENCY_CONVERSION_KEY=68e1e4c21564c5ca34feb813\nAWS_ACCESS_KEY_S3=AKIAT7NQUZTXZMF2SUEG\nAWS_SECRET_ACCESS_KEY_S3=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\nDB_HOST=db\nDB_DIALECT=postgres\nDB_NAME=backend\nDB_PORT=15432\nDB_USERNAME=mi_base\nDB_PASSWORD=de_datos\nMQTT_API_HOST=mqtt\nMQTT_API_INFO_CHANNEL=stocks/info\nMQTT_API_VALIDATION_CHANNEL=stocks/validation\nMQTT_API_VALIDATIONS_PATH=validations\nMQTT_API_REQUEST_CHANNEL=stocks/requests\nMQTT_API_REQUESTS_PATH=requests\nMQTT_API_AUCTIONS_CHANNEL=auctions\nMQTT_API_NODE_VERSION=16.13.1\nMQTT_API_PORT=64564\nMQTT_CONNECTION_TIMEOUT=5000\nMQTT_BROKER_PORT=9000\nMQTT_BROKER_HOST=broker.legit.capital\nMQTT_BROKER_USERNAME=students\nMQTT_BROKER_PASSWORD=iic2173-2023-2-students\nLOG_LEVEL=DEBUG\nWORKER_API_HOST=worker_api\nWORKER_API_PORT=65534\nREDIS_PROTOCOL=redis\nREDIS_HOST=redis_workers\nREDIS_PORT=6379\nREDIS_DATABASE=0\nN_WORKERS=5\nQUERY_FETCH_SIZE=1000\nMAIN_API_URI=https://api.arqui.ljg.cl/\nDDNS_DOMAINS=arqui-workers.ljg.cl\nCLOUDFLARE_API_KEY=tVrhhLqaE_u-2vFrbo0r7dObTdcdllqOvWn6hwts\n" > .env
          
          ## FIXME: Usar variables de entorno
          echo -e "-----BEGIN CERTIFICATE-----\nMIIFFjCCAv6gAwIBAgIRAJErCErPDBinU/bWLiWnX1owDQYJKoZIhvcNAQELBQAw\nTzELMAkGA1UEBhMCVVMxKTAnBgNVBAoTIEludGVybmV0IFNlY3VyaXR5IFJlc2Vh\ncmNoIEdyb3VwMRUwEwYDVQQDEwxJU1JHIFJvb3QgWDEwHhcNMjAwOTA0MDAwMDAw\nWhcNMjUwOTE1MTYwMDAwWjAyMQswCQYDVQQGEwJVUzEWMBQGA1UEChMNTGV0J3Mg\nRW5jcnlwdDELMAkGA1UEAxMCUjMwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEK\nAoIBAQC7AhUozPaglNMPEuyNVZLD+ILxmaZ6QoinXSaqtSu5xUyxr45r+XXIo9cP\nR5QUVTVXjJ6oojkZ9YI8QqlObvU7wy7bjcCwXPNZOOftz2nwWgsbvsCUJCWH+jdx\nsxPnHKzhm+/b5DtFUkWWqcFTzjTIUu61ru2P3mBw4qVUq7ZtDpelQDRrK9O8Zutm\nNHz6a4uPVymZ+DAXXbpyb/uBxa3Shlg9F8fnCbvxK/eG3MHacV3URuPMrSXBiLxg\nZ3Vms/EY96Jc5lP/Ooi2R6X/ExjqmAl3P51T+c8B5fWmcBcUr2Ok/5mzk53cU6cG\n/kiFHaFpriV1uxPMUgP17VGhi9sVAgMBAAGjggEIMIIBBDAOBgNVHQ8BAf8EBAMC\nAYYwHQYDVR0lBBYwFAYIKwYBBQUHAwIGCCsGAQUFBwMBMBIGA1UdEwEB/wQIMAYB\nAf8CAQAwHQYDVR0OBBYEFBQusxe3WFbLrlAJQOYfr52LFMLGMB8GA1UdIwQYMBaA\nFHm0WeZ7tuXkAXOACIjIGlj26ZtuMDIGCCsGAQUFBwEBBCYwJDAiBggrBgEFBQcw\nAoYWaHR0cDovL3gxLmkubGVuY3Iub3JnLzAnBgNVHR8EIDAeMBygGqAYhhZodHRw\nOi8veDEuYy5sZW5jci5vcmcvMCIGA1UdIAQbMBkwCAYGZ4EMAQIBMA0GCysGAQQB\ngt8TAQEBMA0GCSqGSIb3DQEBCwUAA4ICAQCFyk5HPqP3hUSFvNVneLKYY611TR6W\nPTNlclQtgaDqw+34IL9fzLdwALduO/ZelN7kIJ+m74uyA+eitRY8kc607TkC53wl\nikfmZW4/RvTZ8M6UK+5UzhK8jCdLuMGYL6KvzXGRSgi3yLgjewQtCPkIVz6D2QQz\nCkcheAmCJ8MqyJu5zlzyZMjAvnnAT45tRAxekrsu94sQ4egdRCnbWSDtY7kh+BIm\nlJNXoB1lBMEKIq4QDUOXoRgffuDghje1WrG9ML+Hbisq/yFOGwXD9RiX8F6sw6W4\navAuvDszue5L3sz85K+EC4Y/wFVDNvZo4TYXao6Z0f+lQKc0t8DQYzk1OXVu8rp2\nyJMC6alLbBfODALZvYH7n7do1AZls4I9d1P4jnkDrQoxB3UqQ9hVl3LEKQ73xF1O\nyK5GhDDX8oVfGKF5u+decIsH4YaTw7mP3GFxJSqv3+0lUFJoi5Lc5da149p90Ids\nhCExroL1+7mryIkXPeFM5TgO9r0rvZaBFOvV2z0gp35Z0+L4WPlbuEjN/lxPFin+\nHlUjr8gRsI3qfJOQFy/9rKIJR0Y/8Omwt/8oTWgy1mdeHmmjk7j1nYsvC9JSQ6Zv\nMldlTTKB3zhThV1+XWYp6rjd5JW1zbVWEkLNxE7GJThEUG3szgBVGP7pSWTUTsqX\nnLRbwHOoq7hHwg==\n-----END CERTIFICATE-----\n" > "./workers/nginx/templates/letsencrypt/arqui-workers.ljg.cl/chain1.pem" 
          echo -e "-----BEGIN PRIVATE KEY-----\nMIG2AgEAMBAGByqGSM49AgEGBSuBBAAiBIGeMIGbAgEBBDCPw4PIqkq57fH2jR3X\npAxjcgpN2WAEYKD9qdZC1j7yH72ea/jj8qRA6IjuK+Lq2wuhZANiAASspO49ksRt\n17trZ7MTkSjXm5fZTzm5JD9w9tuZPbJZISmi54PnnAhpwvLU/8r3GpeIvQT7kfSs\nlqeJemgXRVZuihSZty80SgZYdpN5vw7rPmUSz9WVKYs1C9oMwxSSsGw=\n-----END PRIVATE KEY-----\n" > "./workers/nginx/templates/letsencrypt/arqui-workers.ljg.cl/privkey1.pem"
          echo -e "-----BEGIN CERTIFICATE-----\nMIIEZTCCA02gAwIBAgISBMGVrZUpbf3VJN8CjNwICX0cMA0GCSqGSIb3DQEBCwUA\nMDIxCzAJBgNVBAYTAlVTMRYwFAYDVQQKEw1MZXQncyBFbmNyeXB0MQswCQYDVQQD\nEwJSMzAeFw0yMzEwMjkxOTM1MzZaFw0yNDAxMjcxOTM1MzVaMCMxITAfBgNVBAMT\nGGFwaS5hcnF1aS13b3JrZXJzLmxqZy5jbDB2MBAGByqGSM49AgEGBSuBBAAiA2IA\nBKyk7j2SxG3Xu2tnsxORKNebl9lPObkkP3D225k9slkhKaLng+ecCGnC8tT/yvca\nl4i9BPuR9KyWp4l6aBdFVm6KFJm3LzRKBlh2k3m/Dus+ZRLP1ZUpizUL2gzDFJKw\nbKOCAjAwggIsMA4GA1UdDwEB/wQEAwIHgDAdBgNVHSUEFjAUBggrBgEFBQcDAQYI\nKwYBBQUHAwIwDAYDVR0TAQH/BAIwADAdBgNVHQ4EFgQUpXtfY3jSWsOIEymfRqKy\nAq9ayEIwHwYDVR0jBBgwFoAUFC6zF7dYVsuuUAlA5h+vnYsUwsYwVQYIKwYBBQUH\nAQEESTBHMCEGCCsGAQUFBzABhhVodHRwOi8vcjMuby5sZW5jci5vcmcwIgYIKwYB\nBQUHMAKGFmh0dHA6Ly9yMy5pLmxlbmNyLm9yZy8wOQYDVR0RBDIwMIIYYXBpLmFy\ncXVpLXdvcmtlcnMubGpnLmNsghRhcnF1aS13b3JrZXJzLmxqZy5jbDATBgNVHSAE\nDDAKMAgGBmeBDAECATCCAQQGCisGAQQB1nkCBAIEgfUEgfIA8AB2ADtTd3U+LbmA\nToswWwb+QDtn2E/D9Me9AA0tcm/h+tQXAAABi30mL0kAAAQDAEcwRQIhAPXsO9V1\nx1malu4QPFWvk1amia/tVjLjkFE8h7RpqalTAiACro3KV4A5x9GbjZM/e+8u1wr8\nFh6JuKo9IQV24Gm9uQB2ANq2v2s/tbYin5vCu1xr6HCRcWy7UYSFNL2kPTBI1/ur\nAAABi30mL14AAAQDAEcwRQIhANgabsC/zZrz+WI6yy8zyatsiDo2tOLOrSkC/EW4\nZY7qAiB1Cz6uOb+YsZv+S48T0tujPRIZIpVBBsGqM1dmSauZBTANBgkqhkiG9w0B\nAQsFAAOCAQEAgyA9ykrzIKo3tgmrQr3s1HkUrxNt5JNGX7sZQt0bJYhCWkLyHoIk\nkdwfhlduul7f4rjSZGDEustjWZ+44G7a2HnQSB6TXZODSHa//cz3pfkT4XxnEqNg\noWPTluuEiUYeeDu5BQ0J3CTylOUD+H49jZsauy8kavYA3yH7H+6xAx1cB2NA2gsL\nDj87Bqdao9R3tY/DtTr1GjTRMNHtG5j1fqatEiJpm0Dlxg9jft751HcvrkAWPBnD\nC/0EvbxBE1k764OSSB49bKmHMjL8rGmk6K1VkHBR/1+LSvIJbF+Nd4xSnuaShDnf\no5HTchIiai2IYSSj1aJdV8L44IdLB88OZQ==\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\nMIIFFjCCAv6gAwIBAgIRAJErCErPDBinU/bWLiWnX1owDQYJKoZIhvcNAQELBQAw\nTzELMAkGA1UEBhMCVVMxKTAnBgNVBAoTIEludGVybmV0IFNlY3VyaXR5IFJlc2Vh\ncmNoIEdyb3VwMRUwEwYDVQQDEwxJU1JHIFJvb3QgWDEwHhcNMjAwOTA0MDAwMDAw\nWhcNMjUwOTE1MTYwMDAwWjAyMQswCQYDVQQGEwJVUzEWMBQGA1UEChMNTGV0J3Mg\nRW5jcnlwdDELMAkGA1UEAxMCUjMwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEK\nAoIBAQC7AhUozPaglNMPEuyNVZLD+ILxmaZ6QoinXSaqtSu5xUyxr45r+XXIo9cP\nR5QUVTVXjJ6oojkZ9YI8QqlObvU7wy7bjcCwXPNZOOftz2nwWgsbvsCUJCWH+jdx\nsxPnHKzhm+/b5DtFUkWWqcFTzjTIUu61ru2P3mBw4qVUq7ZtDpelQDRrK9O8Zutm\nNHz6a4uPVymZ+DAXXbpyb/uBxa3Shlg9F8fnCbvxK/eG3MHacV3URuPMrSXBiLxg\nZ3Vms/EY96Jc5lP/Ooi2R6X/ExjqmAl3P51T+c8B5fWmcBcUr2Ok/5mzk53cU6cG\n/kiFHaFpriV1uxPMUgP17VGhi9sVAgMBAAGjggEIMIIBBDAOBgNVHQ8BAf8EBAMC\nAYYwHQYDVR0lBBYwFAYIKwYBBQUHAwIGCCsGAQUFBwMBMBIGA1UdEwEB/wQIMAYB\nAf8CAQAwHQYDVR0OBBYEFBQusxe3WFbLrlAJQOYfr52LFMLGMB8GA1UdIwQYMBaA\nFHm0WeZ7tuXkAXOACIjIGlj26ZtuMDIGCCsGAQUFBwEBBCYwJDAiBggrBgEFBQcw\nAoYWaHR0cDovL3gxLmkubGVuY3Iub3JnLzAnBgNVHR8EIDAeMBygGqAYhhZodHRw\nOi8veDEuYy5sZW5jci5vcmcvMCIGA1UdIAQbMBkwCAYGZ4EMAQIBMA0GCysGAQQB\ngt8TAQEBMA0GCSqGSIb3DQEBCwUAA4ICAQCFyk5HPqP3hUSFvNVneLKYY611TR6W\nPTNlclQtgaDqw+34IL9fzLdwALduO/ZelN7kIJ+m74uyA+eitRY8kc607TkC53wl\nikfmZW4/RvTZ8M6UK+5UzhK8jCdLuMGYL6KvzXGRSgi3yLgjewQtCPkIVz6D2QQz\nCkcheAmCJ8MqyJu5zlzyZMjAvnnAT45tRAxekrsu94sQ4egdRCnbWSDtY7kh+BIm\nlJNXoB1lBMEKIq4QDUOXoRgffuDghje1WrG9ML+Hbisq/yFOGwXD9RiX8F6sw6W4\navAuvDszue5L3sz85K+EC4Y/wFVDNvZo4TYXao6Z0f+lQKc0t8DQYzk1OXVu8rp2\nyJMC6alLbBfODALZvYH7n7do1AZls4I9d1P4jnkDrQoxB3UqQ9hVl3LEKQ73xF1O\nyK5GhDDX8oVfGKF5u+decIsH4YaTw7mP3GFxJSqv3+0lUFJoi5Lc5da149p90Ids\nhCExroL1+7mryIkXPeFM5TgO9r0rvZaBFOvV2z0gp35Z0+L4WPlbuEjN/lxPFin+\nHlUjr8gRsI3qfJOQFy/9rKIJR0Y/8Omwt/8oTWgy1mdeHmmjk7j1nYsvC9JSQ6Zv\nMldlTTKB3zhThV1+XWYp6rjd5JW1zbVWEkLNxE7GJThEUG3szgBVGP7pSWTUTsqX\nnLRbwHOoq7hHwg==\n-----END CERTIFICATE-----\n" > "./workers/nginx/templates/letsencrypt/arqui-workers.ljg.cl/fullchain1.pem"
          echo -e "-----BEGIN CERTIFICATE-----\nMIIEZTCCA02gAwIBAgISBMGVrZUpbf3VJN8CjNwICX0cMA0GCSqGSIb3DQEBCwUA\nMDIxCzAJBgNVBAYTAlVTMRYwFAYDVQQKEw1MZXQncyBFbmNyeXB0MQswCQYDVQQD\nEwJSMzAeFw0yMzEwMjkxOTM1MzZaFw0yNDAxMjcxOTM1MzVaMCMxITAfBgNVBAMT\nGGFwaS5hcnF1aS13b3JrZXJzLmxqZy5jbDB2MBAGByqGSM49AgEGBSuBBAAiA2IA\nBKyk7j2SxG3Xu2tnsxORKNebl9lPObkkP3D225k9slkhKaLng+ecCGnC8tT/yvca\nl4i9BPuR9KyWp4l6aBdFVm6KFJm3LzRKBlh2k3m/Dus+ZRLP1ZUpizUL2gzDFJKw\nbKOCAjAwggIsMA4GA1UdDwEB/wQEAwIHgDAdBgNVHSUEFjAUBggrBgEFBQcDAQYI\nKwYBBQUHAwIwDAYDVR0TAQH/BAIwADAdBgNVHQ4EFgQUpXtfY3jSWsOIEymfRqKy\nAq9ayEIwHwYDVR0jBBgwFoAUFC6zF7dYVsuuUAlA5h+vnYsUwsYwVQYIKwYBBQUH\nAQEESTBHMCEGCCsGAQUFBzABhhVodHRwOi8vcjMuby5sZW5jci5vcmcwIgYIKwYB\nBQUHMAKGFmh0dHA6Ly9yMy5pLmxlbmNyLm9yZy8wOQYDVR0RBDIwMIIYYXBpLmFy\ncXVpLXdvcmtlcnMubGpnLmNsghRhcnF1aS13b3JrZXJzLmxqZy5jbDATBgNVHSAE\nDDAKMAgGBmeBDAECATCCAQQGCisGAQQB1nkCBAIEgfUEgfIA8AB2ADtTd3U+LbmA\nToswWwb+QDtn2E/D9Me9AA0tcm/h+tQXAAABi30mL0kAAAQDAEcwRQIhAPXsO9V1\nx1malu4QPFWvk1amia/tVjLjkFE8h7RpqalTAiACro3KV4A5x9GbjZM/e+8u1wr8\nFh6JuKo9IQV24Gm9uQB2ANq2v2s/tbYin5vCu1xr6HCRcWy7UYSFNL2kPTBI1/ur\nAAABi30mL14AAAQDAEcwRQIhANgabsC/zZrz+WI6yy8zyatsiDo2tOLOrSkC/EW4\nZY7qAiB1Cz6uOb+YsZv+S48T0tujPRIZIpVBBsGqM1dmSauZBTANBgkqhkiG9w0B\nAQsFAAOCAQEAgyA9ykrzIKo3tgmrQr3s1HkUrxNt5JNGX7sZQt0bJYhCWkLyHoIk\nkdwfhlduul7f4rjSZGDEustjWZ+44G7a2HnQSB6TXZODSHa//cz3pfkT4XxnEqNg\noWPTluuEiUYeeDu5BQ0J3CTylOUD+H49jZsauy8kavYA3yH7H+6xAx1cB2NA2gsL\nDj87Bqdao9R3tY/DtTr1GjTRMNHtG5j1fqatEiJpm0Dlxg9jft751HcvrkAWPBnD\nC/0EvbxBE1k764OSSB49bKmHMjL8rGmk6K1VkHBR/1+LSvIJbF+Nd4xSnuaShDnf\no5HTchIiai2IYSSj1aJdV8L44IdLB88OZQ==\n-----END CERTIFICATE-----\n" > "./workers/nginx/templates/letsencrypt/arqui-workers.ljg.cl/cert1.pem"
  
          #echo -e "${{ secrets.CHAIN1_ARQUIWORKERS }}" > "./workers/nginx/templates/letsencrypt/arqui-workers.ljg.cl/chain1.pem"
          #echo -e "${{ secrets.PRIVKEY1_ARQUIWORKERS }}" > "./workers/nginx/templates/letsencrypt/arqui-workers.ljg.cl/privkey1.pem"
          #echo -e "${{ secrets.FULLCHAIN1_ARQUIWORKERS }}" > "./workers/nginx/templates/letsencrypt/arqui-workers.ljg.cl/fullchain1.pem"
          #echo -e "${{ secrets.CERT1_ARQUIWORKERS }}" > "./workers/nginx/templates/letsencrypt/arqui-workers.ljg.cl/cert1.pem"

      - name: Save .env
        run: |
          sshpass -p "${EC2PASSWD}" scp -o StrictHostKeyChecking=no ./.env ${EC2USER}@${EC2HOST}:/home/${EC2USER}/grupo19-backend/workers/

      - name: Save SSL Certificates
        run: |
          sshpass -p "${EC2PASSWD}" scp -o StrictHostKeyChecking=no ./workers/nginx/templates/letsencrypt/arqui-workers.ljg.cl/* ${EC2USER}@${EC2HOST}:/home/${EC2USER}/grupo19-backend/workers/nginx/templates/letsencrypt/arqui-workers.ljg.cl

  update-and-reload-containers:
    needs:
      - build-and-push-api-workers
      - build-and-push-celery-workers
      - update_ssl-certificates
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3

      - name: Install ssh
        run: sudo apt-get install openssh-client sshpass -y

      - name: Setup environment variables
        run: |
          echo "EC2HOST=arqui-workers.ljg.cl" >> $GITHUB_ENV
          echo "EC2PORT=22" >> $GITHUB_ENV
          echo "EC2USER=ubuntu" >> $GITHUB_ENV
          echo "EC2PASSWD=${{ secrets.EC2PASSWD }}" >> $GITHUB_ENV

      - name: Update and reload containers
        run: |
          connect_ssh() { sshpass -p "${EC2PASSWD}" ssh -o StrictHostKeyChecking=no -p ${EC2PORT} ${EC2USER}@${EC2HOST} -Ct " cd /home/ubuntu/grupo19-backend/workers && $@" ; }
          connect_ssh "sudo docker system prune -a -f" ;
          connect_ssh "sudo docker compose -f ./docker-compose.yaml pull" ;
          connect_ssh "sudo docker compose -f ./docker-compose.yaml up -d" ;

  raising-backup-containers:
    needs:
      - update-and-reload-containers
    runs-on: ubuntu-latest
    if: failure()
    steps:
      - name: Setup environment variables
        run: |
          echo "EC2HOST=arqui-workers.ljg.cl" >> $GITHUB_ENV
          echo "EC2PORT=22" >> $GITHUB_ENV
          echo "EC2USER=ubuntu" >> $GITHUB_ENV
          echo "EC2PASSWD=${{ secrets.EC2PASSWD }}" >> $GITHUB_ENV

      - name: FAILURE - Raise containers back up on old checkout
        run:
          sudo apt-get install openssh-client sshpass -y ;

          connect_ssh() { sshpass -p "${EC2PASSWD}" ssh -o StrictHostKeyChecking=no -p ${EC2PORT} ${EC2USER}@${EC2HOST} -Ct " cd /home/ubuntu/grupo19-backend/workers && $@" ; }
          
          connect_ssh "cd .. ; git reset --hard && git checkout f5d6b2a6 " ;
          connect_ssh "sudo docker compose -f ./docker-compose.yaml down" ;
          connect_ssh "sudo docker system prune -a -f" ;
          connect_ssh "sudo docker compose -f ./docker-compose.yaml build --no-cache" ;
          connect_ssh "sudo docker compose -f ./docker-compose.yaml pull" ;
          connect_ssh "sudo docker compose -f ./docker-compose.yaml up -d" ;
